# -*- coding: utf-8 -*-
"""Phân tích dữ liệu với Python _NLMT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13gYUgHJKV6rYWhACl52GpbTsjOgJAwzJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statistics
from scipy.stats import sem
import scipy.stats
import datetime as dt
import scipy.stats as stats
from scipy import stats
from statsmodels.stats.weightstats import ztest as ztest
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import f_oneway
import scipy.stats as st

df=pd.read_csv('shipping.csv')

"""**TỔNG QUAN VỀ DỮ LIỆU**"""

df

df.head()

"""**GIÁ TRỊ TRUNG BÌNH**


"""

df=pd.read_csv('shipping.csv')
data = df['Cost_of_the_Product']
mean = sum(data) / len(data)
print('Giá trị trung bình chi phí sản phẩm là: ' ,mean)

"""**MEDIAN**"""

data = df['Customer_care_calls']
median = np.median(data)
print("Trung vị của cuộc gọi chăm sóc khách hàng là: " ,median)

"""**MODE**"""

data = df['Customer_rating']
mode = statistics.mode(data)
print("Giá trị xuất hiện nhiều nhất trong cột đánh giá khách hàng là: " ,mode)

"""**PHƯƠNG SAI**"""

data = df['Cost_of_the_Product']
mean = sum(data) / len(data)
variance = statistics.variance(data, mean)
print('Phương sai của chi phí sản phẩm là: ' ,variance)

"""**ĐỘ LỆCH CHUẨN**"""

data = df['Cost_of_the_Product']
standard_deviation = statistics.stdev(data)
print("Độ lệch chuẩn của chi phí sản phẩm là: " ,standard_deviation)

"""**SAI SỐ TIÊU CHUẨN**"""

data = df['Cost_of_the_Product']
Sai_so = sem(data)
print("Sai số tiêu chuẩn của cột chi phí sản phẩm là: " ,Sai_so)

"""**BÁCH PHÂN VỊ**"""

data = df['Discount_offered']
min = df['Discount_offered'].min()
max = df['Discount_offered'].max()
print('Giá trị nhỏ nhất là: ',min)
print('Giá trị lớn nhất là: ',max)
bach_phan_vi = np.percentile(data, [20, 50, 75])
print(bach_phan_vi)

"""**PHẠM VI**"""

data = df['Cost_of_the_Product']
result = scipy.stats.describe(data, ddof=1, bias=False)
print(result)

"""**TÍNH ĐIỂM Z**"""

data = df['Prior_purchases']
z = scipy.stats.zscore(data, axis=0, ddof=0)
print(z)

"""**LẤY MẪU THEO CỤM**"""

#Đọc dữ liệu từ file
df=pd.read_csv('shipping.csv')

#Chia dữ liệu thành các cụm
clusters = np.random.choice(np.arange(1,70), size=69, replace=False)

# Lấy mẫu từ mỗi cụm
cluster_sample = df[df['Discount_offered'].isin(clusters)]

#Đếm
cluster_sample['Discount_offered'].value_counts()

"""**TÌM TẦN SỐ CỦA MỘT GIÁ TRỊ CỤ THỂ TRONG MỘT CỘT DỮ LIỆU**

Tìm tần số xuất hiện của giá trị 'Flight' trong cột Mode_of_Shipment.
"""

#Đọc dữ liệu từ file
df=pd.read_csv('shipping.csv')

#Tìm tần số của từng giá trị
gia_tri = 'Flight'
tan_so = df['Mode_of_Shipment'].value_counts()[gia_tri]

# In ra số lần xuất hiện của giá trị cụ thể
print(f'Tần số xuất hiện của {gia_tri} là: {tan_so}')

"""**BẢNG TẦN SỐ**

Bảng tần số 1 chiều
"""

#Đọc dữ liệu từ file
df=pd.read_csv('shipping.csv')

#Tìm tần số của từng giá trị
tan_so = pd.crosstab(index=df['Cost_of_the_Product'], columns='count')

#In giá trị tần số
print(tan_so)

"""**NHẬN XÉT**


*  Mỗi hàng đại diện cho một giá trị khác nhau của "Cost_of_the_Product".
*  Cột "count" sẽ chứa số lần xuất hiện của giá trị tương ứng trong cột "Cost_of_the_Product".

**BẢNG TẦN SUẤT**
"""

#Đọc dữ liệu từ file
df=pd.read_csv('shipping.csv')

#tìm tần số
tan_so = pd.crosstab(index=df['Warehouse_block'], columns='count')

#tìm tần suất
tan_so/tan_so.sum()

"""**NHẬN XÉT**


*   Mỗi hàng đại diện cho một giá trị khác nhau của "Warehouse_block".
*  Cột "count" sẽ chứa tần suất của giá trị tương ứng, tức là tỷ lệ phần trăm số lần xuất hiện của giá trị đó so với tổng số lần xuất hiện của tất cả các giá trị trong cột "Warehouse_block".
*   Giá trị A chiếm 16,65%, giá trị B chiếm 16,65%, giá trị C chiếm 16.65%, giá trị D chiếm 16,67%, và giá trị F chiếm 33,33% trong cột "Warehouse_block".

**CHUẨN HOÁ DỮ LIỆU**
"""

data = df['Cost_of_the_Product']
df_norm = (data-data.min())/ (data.max() - data.min())
df_norm

"""**NHẬN XÉT**


*   Kết quả đầu ra của đoạn code là một Series df_norm với các giá trị của cột "Cost_of_the_Product" đã được chuẩn hóa về khoảng [0, 1].
*   Mỗi giá trị trong df_norm sẽ phản ánh vị trí tương đối của giá trị gốc so với khoảng giá trị ban đầu của cột "Cost_of_the_Product".

**TÌM TẦN SUẤT TƯƠNG ĐỐI**
"""

data = df['Cost_of_the_Product']
relative_frequency = df['Cost_of_the_Product'].value_counts(normalize=True)
print(relative_frequency)

"""**NHẬN XÉT**


*   Đoạn code này hữu ích để hiểu rõ hơn về phân phối của các giá trị trong cột "Cost_of_the_Product".
*   Việc sử dụng value_counts(normalize=True) giúp dễ dàng tính toán và hiển thị tần suất tương đối của các giá trị, thay vì chỉ tần số tuyệt đối.


"""

df.columns

df.shape

df.info()

df.isnull().sum()

df.duplicated().sum()

df.describe(include='all').T

"""**BIỂU ĐỒ TRÒN**

Tần suất đóng góp của kho nào trong cột Warehouse_block có tần suất cao nhất?
"""

plt.title('Đóng góp kho')
df['Warehouse_block'].value_counts().plot.pie(explode=(0,0,0,0,0),autopct="%.0f%%",shadow=True)
plt.show()

"""NHẬN XÉT


*   Đoạn code này tạo ra một biểu đồ hình tròn hữu ích để trực quan hóa tần suất của các giá trị trong cột "Warehouse_block".
*   Việc sử dụng autopct giúp người xem dễ dàng nhận biết tỉ lệ phần trăm của mỗi miếng bánh.
 (A:17% B:17% C:17% D:17% F:33%)
*   Đoạn mã này phù hợp khi bạn muốn trình bày một cách trực quan sự phân bố của các giá trị trong một cột cụ thể của DataFrame pandas.

Tầm quan trọng của sản phẩm theo mức độ nào là cao nhất?
"""

plt.title('Tầm quan trọng của sản phẩm')
df['Product_importance'].value_counts().plot.pie(explode=(0,0,0.3),autopct="%.0f%%",shadow=True)
plt.show()

"""**NHẬN XÉT**


*   Tạo ra một biểu đồ hình tròn hữu ích để trực quan hóa tần suất của các giá trị trong cột "Product_importance".
*   Việc sử dụng explode giúp nhấn mạnh một giá trị cụ thể trong biểu đồ.
 (high 9%)
*   Phần trăm của mỗi phần được hiển thị làm tròn đến số nguyên gần nhất.
* Đoạn mã này phù hợp khi bạn muốn trình bày một cách trực quan sự phân bố của các giá trị trong một cột cụ thể của DataFrame pandas, với khả năng nhấn mạnh một giá trị cụ thể.

**BIỂU ĐỒ CỘT (BAR CHART)**

Phương thức nào được người dùng chọn nhiều nhất trong cột 'Mode_of_Shipment'?
"""

plt.figure(figsize=(8,6))
sns.countplot(df,x='Mode_of_Shipment')
plt.show()

"""**NHẬN XÉT**


*   Trục x hiển thị các giá trị khác nhau trong cột "Mode_of_Shipment".
*   Trục y hiển thị số lần xuất hiện (tần số) của mỗi giá trị trong cột "Mode_of_Shipment".
*   Mỗi cột biểu diễn tần số của một giá trị cụ thể.
*   Kích thước biểu đồ là 8 inch chiều rộng và 6 inch chiều cao, giúp dễ dàng quan sát và phân tích.
*   Đoạn code này tạo ra một biểu đồ cột đếm hữu ích để trực quan hóa tần số của các giá trị trong cột "Mode_of_Shipment".
*   Thiết lập kích thước biểu đồ giúp cải thiện khả năng đọc và phân tích dữ liệu.
*   Việc sử dụng sns.countplot từ thư viện Seaborn giúp tạo biểu đồ cột một cách dễ dàng và đẹp mắt.

**BIỂU ĐỒ HISTOGRAM**

Tần số giá trị nào của chi phí sản phẩm là cao nhất?
"""

plt.title('Chi phí sản phẩm')
sns.histplot(data=df,x='Cost_of_the_Product', kde=True)
plt.show()

"""**NHẬN XÉT**

*   Trục x hiển thị các giá trị của cột "Cost_of_the_Product".
*   Trục y hiển thị tần số (số lượng) các giá trị trong các khoảng (bins) khác nhau của cột "Cost_of_the_Product".
*   Biểu đồ histogram thể hiện phân phối tần số của các giá trị trong cột "Cost_of_the_Product".
*   Biểu đồ histogram thể hiện phân phối tần số của các giá trị trong cột "Cost_of_the_Product".
*   Biểu đồ histogram là một công cụ mạnh mẽ để phân tích phân phối tần số của dữ liệu và tìm ra các đặc điểm quan trọng như tính đối xứng, sự tập trung, hay sự tồn tại của các ngoại lệ (outliers).
*   Việc sử dụng kde=True thêm đường cong mật độ kernel, giúp hình dung phân phối xác suất liên tục của dữ liệu một cách mượt mà hơn.




"""

plt.title('Cuộc gọi chăm sóc khách hàng')
sns.histplot(data=df,x='Customer_care_calls', kde=True)
plt.show()

"""**NHẬN XÉT**

*   Trục x hiển thị các giá trị của cột "Customer_care_calls".
*   Trục y hiển thị tần số (số lượng) các giá trị trong các khoảng (bins) khác nhau của cột "Customer_care_calls".
*   Biểu đồ histogram thể hiện phân phối tần số của các giá trị trong cột "Customer_care_calls".
*   Đường cong mật độ kernel (KDE) giúp hình dung phân phối xác suất liên tục của dữ liệu, cung cấp cái nhìn mượt mà hơn về phân phối.

**BIỂU ĐỒ THANH NGANG**

Tỉ lệ của sản phẩm theo phương thức vận chuyển nào là nhiều nhất?
"""

top_product= df[['Mode_of_Shipment','Cost_of_the_Product']].groupby('Mode_of_Shipment').sum()
top_product = top_product.sort_values(by="Cost_of_the_Product", ascending=False)
top_product

top_product.plot(kind='barh',figsize=(12,7),title='Top Product')
plt.show()

"""**BIỂU ĐỒ ĐƯỜNG**

Tỉ lệ mua trước của phương thức vận chuyển nào là cao nhất?
"""

ti_le = df.groupby('Mode_of_Shipment').sum()['Prior_purchases']
ti_le

phuong_thuc = []
for Mode_of_Shipment, Prior_purchases in ti_le.items():
  phuong_thuc.append(Mode_of_Shipment)
print(phuong_thuc)

plt.plot(phuong_thuc, ti_le, color='red', marker='o')
plt.title('Tổng tỉ lệ mua hàng trước')
plt.xlabel('Phương thức')
plt.ylabel('Total purchases')
plt.grid()
plt.show()

"""**NHẬN XÉT**

*   Trục x là các phương thức mua hàng.
*   Trục y là tổng số lượng mua hàng.
*   Đường đồ thị màu đỏ với điểm đánh dấu hình tròn (marker='o') cho mỗi điểm dữ liệu.
*   Lưới hỗ trợ trên biểu đồ giúp dễ dàng đọc giá trị.
*   Đoạn code này dùng để vẽ biểu đồ đường đơn giản để biểu thị quan hệ giữa các phương thức mua hàng và tổng số lượng mua hàng.
*   Các hàm plt.title, plt.xlabel, plt.ylabel và plt.grid giúp tăng tính thẩm mỹ và khả năng trình bày của biểu đồ.

**T TEST 1 MẪU**

Giá trị trung bình của chi phí sản phẩm có bằng 210 hay không ?
"""

tb = df['Cost_of_the_Product'].mean()
print('Giá trị trung bình của chi phí sản phẩm là: ',tb)

"""**Kiểm định t - hai mẫu**"""

grouped_CP = df[['Mode_of_Shipment','Cost_of_the_Product']].groupby('Mode_of_Shipment').mean()
grouped_CP

"""**NHẬN XÉT**


*   Flight: Chi phí trung bình của sản phẩm là khoảng 209.31
*   Road: Chi phí trung bình của sản phẩm là khoảng 210.48
*   Ship: Chi phí trung bình của sản phẩm là khoảng 210.34
*   Kết quả này có thể dùng để ra quyết định về lựa chọn phương thức vận chuyển dựa trên chi phí, giúp tối ưu hóa chi phí vận chuyển của doanh nghiệp.


"""

grouped_PP = df[['Mode_of_Shipment','Prior_purchases']].groupby('Mode_of_Shipment').mean()
grouped_PP

"""**NHẬN XÉT**


*   Flight: Số lần mua hàng trước đây trung bình là khoảng 3.57
*   Road: Số lần mua hàng trước đây trung bình là khoảng 3.58.
*   Ship: Số lần mua hàng trước đây trung bình là khoảng 3.56.
*   Kết quả này có thể dùng để phân tích xu hướng mua hàng của khách hàng dựa trên phương thức vận chuyển, giúp doanh nghiệp hiểu rõ hơn về hành vi của khách hàng và tối ưu hóa dịch vụ vận chuyển của mình.


"""

#find variance for each group
print(np.var(grouped_CP), np.var(grouped_PP))
#perform two sample t-test with equal variances
stats.ttest_ind(a=grouped_CP, b=grouped_PP, equal_var=True)

"""**NHẬN XÉT**

*   p-value rất nhỏ (6.15829184e-11) cho thấy rằng kết quả này có ý nghĩa thống kê cao. Nếu p-value nhỏ hơn 0.05 có thể bác bỏ giả thuyết không  với mức độ tin cậy cao.
*   Giá trị statistic cao (558.68939432) cho thấy sự khác biệt lớn giữa các nhóm hoặc một mối quan hệ mạnh mẽ giữa các biến.
*   Nó sẽ tính phương sai của mỗi nhóm và sau đó thực hiện kiểm định t-test hai mẫu để xác định xem liệu có sự khác biệt đáng kể giữa hai nhóm này hay không.
*   Các hệ số 0.273099 và 0.000055 này biểu thị mức độ thay đổi của biến phụ thuộc khi biến độc lập thay đổi một đơn vị. Hệ số dương cho thấy mối quan hệ tích cực, tức là khi biến độc lập tăng, biến phụ thuộc cũng tăng.
*   Cả chi phí của sản phẩm và số lần mua hàng trước đây đều có ảnh hưởng đáng kể đến biến phụ thuộc trong mô hình phân tích này.

**HỆ SỐ TƯƠNG QUAN**

**Mối tương quan giữa đánh giá người dùng và tỉ lệ của sản phẩm **
"""

var1 = df['Customer_rating']
var2 = df['Cost_of_the_Product']
np.corrcoef(var1, var2)

"""Hệ số tương quan của bài toán ở trên là r = 0.00926952 mà r nằm trong khoảng từ 0.009 nên là tương quan yếu.

**TƯƠNG QUAN BỘ PHẬN**
"""

data = {'Customer_care_calls': df['Customer_care_calls'],
        'Cost_of_the_Product':  df['Cost_of_the_Product'],
        'Customer_rating': df['Customer_rating']
}

df = pd.DataFrame(data,columns=['Customer_care_calls','Cost_of_the_Product','Customer_rating'])
df

corr = df.corr()
corr.style.background_gradient(cmap='coolwarm')

"""

*   Hệ số tương quan giữa Cost_of_the_Product và Customer_care_calls là 0.323182 (cho thấy một mức tương quan trung bình giữa số lượng cuộc gọi chăm sóc khách hàng và giá sản phẩm)
*   Hệ số tương quan giữa Customer_care_calls và Customer_rating là 0.012209 (chỉ thấp hơn so với tương quan với Cost of the Product)
*   Hệ số tương quan giữa Cost_of_the_Product và Customer_rating là 0.009270 (thấp hơn nhiều so với tương quan với Customer care calls)
*   Cả chi phí của sản phẩm và số lần mua hàng trước đây đều có ảnh hưởng đáng kể đến biến phụ thuộc trong mô hình phân tích này.
*   Customer care calls và Cost of the Product có mức tương quan trung bình, trong khi Customer rating không có mối tương quan đáng kể với các biến khác.






"""